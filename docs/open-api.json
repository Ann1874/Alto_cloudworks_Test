{
    "openapi": "3.0.1",
    "info": {
      "title": "CORE API",
      "description": "Core API description",
      "contact": {
        "name": "Clay Support",
        "url": "https://claysolutions.freshdesk.com",
        "email": "support@my-clay.com"
      },
      "version": "v1.2"
    },
    "paths": {
      "/v1.2/access_groups": {
        "get": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Gets the list of all access groups (OData)",
          "operationId": "GetAccessGroupsV1_2",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessGroupResponsePagedResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Adds an access group",
          "operationId": "PostAccessGroupV1_2",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAccessGroupRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAccessGroupRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostAccessGroupRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessGroupResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/access_groups/{id}": {
        "get": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Gets a single access group",
          "operationId": "GetAccessGroupByIdV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessGroupResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Deletes the Access Group",
          "operationId": "DeleteAccessGroupV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Updates the access group info",
          "operationId": "PatchAccessGroupV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessGroupRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessGroupRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessGroupRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessGroupResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/access_groups/{id}/accessors": {
        "get": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Gets accessors associated with the Access Group",
          "operationId": "GetAccessGroupAccessorsV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessorResponsePagedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Sets a list of accessors to an access group replacing the existing setup",
          "operationId": "PatchAccessGroupAccessorsV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "lists of added / removed accessor ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessGroupRelationRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessGroupRelationRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessGroupRelationRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Sets a list of accessors to an access group",
          "operationId": "PutAccessGroupAccessorsV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "list of accessors assigned to access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutAccessGroupAccessorsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PutAccessGroupAccessorsRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PutAccessGroupAccessorsRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/access_groups/{id}/locks": {
        "get": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Gets the locks associated to the Access Group",
          "operationId": "GetAccessGroupLocksV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponsePagedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "AccessGroups"
          ],
          "summary": "Sets a list of locks to an access group replacing the existing setup",
          "operationId": "PatchAccessGroupLocksV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "lists of added / removed lock ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessGroupRelationRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessGroupRelationRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessGroupRelationRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/access_groups/{id}/time_schedules": {
        "get": {
          "tags": [
            "AccessGroupTimeSchedules"
          ],
          "summary": "Gets the time schedules associated with the Access Group",
          "operationId": "GetAccessGroupTimeSchedulesV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessGroupTimeScheduleResponsePagedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "AccessGroupTimeSchedules"
          ],
          "summary": "Adds a time schedule to the access group",
          "operationId": "PostAccessGroupTimeScheduleV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTimeScheduleRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTimeScheduleRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostTimeScheduleRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessGroupTimeScheduleResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/access_groups/{id}/time_schedules/{time_schedule_id}": {
        "patch": {
          "tags": [
            "AccessGroupTimeSchedules"
          ],
          "summary": "Updates a time schedule related to the access group",
          "operationId": "PatchAccessGroupTimeScheduleV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of Access Group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "time_schedule_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchTimeScheduleRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchTimeScheduleRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchTimeScheduleRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessGroupTimeScheduleResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "AccessGroupTimeSchedules"
          ],
          "summary": "Removes the time schedule from the access group",
          "operationId": "DeleteAccessGroupTimeScheduleV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the access group",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "time_schedule_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{id}/pin/custom": {
        "put": {
          "tags": [
            "AccessorCustomPins"
          ],
          "summary": "Creates a new or updates already existing accessor custom pin.\r\nValid pins are between 4 and 8 chars length and must only contain numeric digits",
          "operationId": "PutAccessorCustomPinV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Accessor Id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Body payload containing desired pin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutAccessorCustomPinRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PutAccessorCustomPinRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PutAccessorCustomPinRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "AccessorCustomPins"
          ],
          "summary": "Removes an existing accessor custom pin.",
          "operationId": "DeleteAccessorCustomPinV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Accessor Id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        }
      },
      "/v1.2/accessors/{id}/devices": {
        "get": {
          "tags": [
            "AccessorDevice"
          ],
          "summary": "Gets list of Accessor Devices",
          "operationId": "GetAccessorDevicesV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessorDeviceResponsePagedResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "AccessorDevice"
          ],
          "summary": "Create an Accessor Device",
          "operationId": "PostAccessorDeviceV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAccessorDeviceRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAccessorDeviceRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostAccessorDeviceRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessorDeviceResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{id}/devices/{d_id}": {
        "get": {
          "tags": [
            "AccessorDevice"
          ],
          "summary": "Gets the Accessor Device by id",
          "operationId": "GetAccessorDeviceV1_2",
          "parameters": [
            {
              "name": "d_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessorDeviceResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "AccessorDevice"
          ],
          "summary": "Deletes the Accessor Device",
          "operationId": "DeleteAccessorDeviceV1_2",
          "parameters": [
            {
              "name": "d_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{id}/devices/{d_id}/certificate": {
        "post": {
          "tags": [
            "AccessorDevice"
          ],
          "summary": "Creates a new certificate for Accessor Device",
          "operationId": "PostCertificateV1_2",
          "parameters": [
            {
              "name": "d_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorDeviceCertificateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorDeviceCertificateRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorDeviceCertificateRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CertificateDataResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "AccessorDevice"
          ],
          "summary": "Activates Accessor device with a valid signature",
          "operationId": "PatchCertificateV1_2",
          "parameters": [
            {
              "name": "d_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessorDeviceCertificateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessorDeviceCertificateRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessorDeviceCertificateRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CertificateResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "AccessorDevice"
          ],
          "summary": "Replaces the existing certificate for the Accessor Device",
          "operationId": "PutCertificateV1_2",
          "parameters": [
            {
              "name": "d_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorDeviceCertificateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorDeviceCertificateRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorDeviceCertificateRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CertificateDataResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{id}/devices/{d_id}/mkey": {
        "get": {
          "tags": [
            "AccessorDevice"
          ],
          "summary": "Retrieves the MKey from Iq",
          "operationId": "GetMkeyV1_2",
          "parameters": [
            {
              "name": "d_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "query",
              "description": "Optional collection id if tenant wide mkey sync is enabled, else it is mandatory.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MkeyDataResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{accessor_id}/keys": {
        "get": {
          "tags": [
            "AccessorKey"
          ],
          "summary": "Gets the list of keys of an Accessor",
          "operationId": "GetKeysV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeyResponsePagedResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "AccessorKey"
          ],
          "summary": "Assigns a tag to the accessor",
          "operationId": "PostKeyV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostKeyRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostKeyRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostKeyRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeyResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{accessor_id}/keys/{id}/offline_lock_access": {
        "get": {
          "tags": [
            "AccessorKey"
          ],
          "summary": "Gets the locks the key has offline access to.",
          "operationId": "GetOfflineAccessLocksV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "id of the key",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockSummaryResponsePagedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "AccessorKey"
          ],
          "summary": "Update the locks the key has offline access to.",
          "operationId": "PatchOfflineAccessLocksV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "id of the key",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeyOfflineAccessRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeyOfflineAccessRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeyOfflineAccessRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        }
      },
      "/v1.2/accessors/{accessor_id}/keys/{id}": {
        "patch": {
          "tags": [
            "AccessorKey"
          ],
          "summary": "Updates the Id and Blocked state of a key",
          "operationId": "PatchKeyV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "id of the key",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeyRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeyRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeyRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeyResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "AccessorKey"
          ],
          "summary": "Removes the tag from the accessor.",
          "description": "Does not delete the tag itself",
          "operationId": "DeleteKeyV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "id of the key",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "force",
              "in": "query",
              "description": "If set to true (?force=true) removing related lock accessor tags will be done automatically.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{id}/pin": {
        "put": {
          "tags": [
            "AccessorPin"
          ],
          "summary": "Create an Accessor Pin",
          "operationId": "PutAccessorPinV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorPinRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorPinRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AccessorPinRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors": {
        "get": {
          "tags": [
            "Accessors"
          ],
          "summary": "Gets the list of all accessors (OData)",
          "operationId": "GetAccessorsV1_2",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessorResponsePagedResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Accessors"
          ],
          "summary": "Adds a new accessor",
          "operationId": "PostAccessorV1_2",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAccessorRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAccessorRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostAccessorRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{id}": {
        "get": {
          "tags": [
            "Accessors"
          ],
          "summary": "Gets a single accessor",
          "operationId": "GetAccessorByIdV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the accessor",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Accessors"
          ],
          "summary": "Updates accessor",
          "operationId": "UpdateAccessorV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the accessor",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessorRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessorRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAccessorRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Accessors"
          ],
          "summary": "Deletes Accessor",
          "operationId": "DeleteAccessorV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of Accessor",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "force",
              "in": "query",
              "description": "If set to true (?force=true) disabling iqPin activations and removing the tags relations\r\nwill be done automatically.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{id}/access_groups": {
        "get": {
          "tags": [
            "Accessors"
          ],
          "summary": "Gets all the access groups of an accessor",
          "operationId": "GetAccessGroupsOfAccessorV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "AccessorId",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessGroupResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/accessor_settings": {
        "get": {
          "tags": [
            "AccessorSettings"
          ],
          "summary": "Get list of accessor settings",
          "operationId": "GetAccessorSettingsV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionSettingResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/accessors/{accessor_id}/floors": {
        "get": {
          "tags": [
            "CollectionAccessors"
          ],
          "summary": "Gets all the floors assigned to locks an accessor has access to",
          "operationId": "GetCollectionAccessorAccessibleFloorsV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "description": "Id of collection",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "description": "Id of accessor",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FloorResponse"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/accessors/floors": {
        "get": {
          "tags": [
            "CollectionAccessors"
          ],
          "summary": "Gets all the floors assigned to locks collection accessors have access to",
          "operationId": "GetCollectionAccessorsAccessibleFloorsV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "description": "Id of collection",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessorFloorsResponse"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/locks": {
        "get": {
          "tags": [
            "CollectionLocks"
          ],
          "summary": "Get the list of all locks in a collection (OData)",
          "operationId": "GetLocksV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/locks/{lock_id}/update": {
        "patch": {
          "tags": [
            "CollectionLocks"
          ],
          "summary": "Updates License Plate Camera property for a Lock",
          "operationId": "PatchLockV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "lock_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCollectionLockRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCollectionLockRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCollectionLockRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections": {
        "get": {
          "tags": [
            "Collections"
          ],
          "summary": "Gets the list of collections (OData)",
          "operationId": "GetCollectionsV1_2",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponsePagedResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Collections"
          ],
          "summary": "Creates collection",
          "operationId": "PostCollectionV1_2",
          "requestBody": {
            "description": "The request object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCollectionRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCollectionRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostCollectionRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{id}": {
        "patch": {
          "tags": [
            "Collections"
          ],
          "summary": "Updates collection's customer reference",
          "operationId": "PatchCollectionV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the collection",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "The request object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchCollectionRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchCollectionRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchCollectionRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Collections"
          ],
          "summary": "Deletes an existing collection If the force = true, unbind dependencies and delete collection",
          "operationId": "DeleteCollectionV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the collection",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "force",
              "in": "query",
              "description": "Reset all dependencies to delete",
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{accessor_id}/collection_settings": {
        "post": {
          "tags": [
            "CollectionSettings"
          ],
          "summary": "Creates collection settings",
          "operationId": "CreateCollectionSettingsV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCollectionSettingRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCollectionSettingRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostCollectionSettingRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionSettingResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "CollectionSettings"
          ],
          "summary": "Get list of collection settings",
          "operationId": "GetCollectionSettingsV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionSettingResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{accessor_id}/collection_settings/{collection_id}": {
        "get": {
          "tags": [
            "CollectionSettings"
          ],
          "summary": "Get collection settings",
          "operationId": "GetCollectionSettingV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionSettingResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "CollectionSettings"
          ],
          "summary": "Patches collection setting",
          "operationId": "PatchCollectionSettingV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchCollectionSettingRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchCollectionSettingRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchCollectionSettingRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionSettingResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "CollectionSettings"
          ],
          "summary": "Deletes collection setting",
          "operationId": "DeleteCollectionSettingV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "force",
              "in": "query",
              "description": "If set to true (?force=true) removing related key settings will be done automatically.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/locks/{lock_id}/locking": {
        "patch": {
          "tags": [
            "CollectionsRemoteOpening"
          ],
          "summary": "Performs unlock action or puts the lock into the office mode",
          "operationId": "RemoteOpeningV1_2",
          "parameters": [
            {
              "name": "lock_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Locking request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockingRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/LockingRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/LockingRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/entries": {
        "get": {
          "tags": [
            "Entries"
          ],
          "summary": "Get all the entries",
          "operationId": "GetEntriesV1_2",
          "parameters": [
            {
              "name": "CLP-Continuation-Token",
              "in": "header",
              "schema": {
                "type": "string",
                "default": ""
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EntryResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/floors": {
        "post": {
          "tags": [
            "Floors"
          ],
          "operationId": "CreateFloorV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloorRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FloorRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/FloorRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FloorResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Floors"
          ],
          "operationId": "GetFloorsV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FloorResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/floors/{id}": {
        "patch": {
          "tags": [
            "Floors"
          ],
          "operationId": "UpdateFloorV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloorPatchRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FloorPatchRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/FloorPatchRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FloorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Floors"
          ],
          "operationId": "DeleteFloorV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "force",
              "in": "query",
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/floors/{id}/locks": {
        "get": {
          "tags": [
            "Floors"
          ],
          "operationId": "GetFloorLocksV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/incidents": {
        "get": {
          "tags": [
            "Incidents"
          ],
          "summary": "Get all the incidents",
          "operationId": "GetIncidentsV1_2",
          "parameters": [
            {
              "name": "CLP-Continuation-Token",
              "in": "header",
              "schema": {
                "type": "string",
                "default": ""
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IncidentResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs": {
        "get": {
          "tags": [
            "Iqs"
          ],
          "summary": "Gets the list of IQs (OData)",
          "operationId": "GetIqsV1_2",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IqResponsePagedResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Iqs"
          ],
          "summary": "Activates IQ",
          "operationId": "PostIqV1_2",
          "requestBody": {
            "description": "The request object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostIqRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostIqRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostIqRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IqResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}": {
        "get": {
          "tags": [
            "Iqs"
          ],
          "summary": "Gets IQ by id",
          "operationId": "GetIqV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the IQ to get",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IqResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Iqs"
          ],
          "summary": "Updates IQ information, states and also can execute operations",
          "operationId": "PatchIqV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ object",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchIqRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchIqRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchIqRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IqResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Iqs"
          ],
          "summary": "Deletes an IQ",
          "operationId": "DeleteIqV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ to delete",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/details": {
        "get": {
          "tags": [
            "Iqs"
          ],
          "summary": "Gets IQ details by id",
          "operationId": "GetIqDetailsV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ to get",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IqDetailsResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/signal_strength": {
        "get": {
          "tags": [
            "Iqs"
          ],
          "summary": "Gets the last known signal strength of the IQ",
          "operationId": "GetIqSignalStrengthV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "force_refresh",
              "in": "query",
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetSignalStrengthResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/software_versions": {
        "get": {
          "tags": [
            "Iqs"
          ],
          "summary": "Gets the software version of the IQ",
          "operationId": "GetIqSoftwareVersionsV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetSoftwareVersionsResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/secret": {
        "get": {
          "tags": [
            "Iqs"
          ],
          "summary": "Get the secret of the IQ",
          "description": "If it is requested without a OTP the first secret is fetched if possible",
          "operationId": "GetIqAccessorSecretV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "query",
              "description": "The accessor for whom the OTP is generated for",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "otp",
              "in": "query",
              "description": "A valid OTP",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetSecretResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/pins/{accessor_id}": {
        "get": {
          "tags": [
            "Iqs"
          ],
          "summary": "Gets the pin of the accessor for that IQ",
          "operationId": "GetIqAccessorPinV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "description": "id of accessor",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPinResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/pins": {
        "get": {
          "tags": [
            "Iqs"
          ],
          "summary": "Gets the accessors which used a pin of the IQ",
          "operationId": "GetIqPinsV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IqPinResponsePagedResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Iqs"
          ],
          "summary": "Changes the pin of the accessor",
          "operationId": "PutIqAccessorPinV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePinRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePinRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePinRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/tree": {
        "get": {
          "tags": [
            "Iqs"
          ],
          "summary": "Gets the current tree structure of the iq",
          "operationId": "GetIqTreeV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IqTreeResponse"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Iqs"
          ],
          "summary": "Sets the hardware tree of the IQ",
          "operationId": "PutIqTreeV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutTreeItemRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PutTreeItemRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PutTreeItemRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/replace": {
        "post": {
          "tags": [
            "Iqs"
          ],
          "summary": "Replaces the IQ with a new one",
          "description": "This call will result with a different IQ id! The old one will be inaccessible",
          "operationId": "PostReplaceIqV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceIqRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceIqRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceIqRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IqResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/restore": {
        "post": {
          "tags": [
            "Iqs"
          ],
          "summary": "Restores the IQ after reset",
          "operationId": "PostRestoreIqV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IqResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{iq_id}/reset": {
        "post": {
          "tags": [
            "Iqs"
          ],
          "summary": "Sends soft reset command to the IQ.",
          "operationId": "PostSoftResetIqV1_2",
          "parameters": [
            {
              "name": "iq_id",
              "in": "path",
              "description": "Id of the IQ",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/iqs/{id}/pins/{pin_id}": {
        "delete": {
          "tags": [
            "Iqs"
          ],
          "summary": "Resets an activation",
          "operationId": "DeleteIqPinV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "pin_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePinRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePinRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePinRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/keys/{id}": {
        "get": {
          "tags": [
            "Keys"
          ],
          "summary": "Gets a single key",
          "operationId": "GetKeyByIdV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the key",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeyResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{accessor_id}/collection_settings/{collection_id}/key_settings": {
        "post": {
          "tags": [
            "KeySettings"
          ],
          "summary": "Adds key settings",
          "operationId": "AddKeySettingsV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostKeySettingsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostKeySettingsRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostKeySettingsRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeySettingResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "KeySettings"
          ],
          "summary": "Gets all collection accessor's key settings",
          "operationId": "GetAllCollectionAccessorKeySettingsV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeySettingResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{accessor_id}/collection_settings/{collection_id}/key_settings/{id}": {
        "get": {
          "tags": [
            "KeySettings"
          ],
          "summary": "Gets a collection accessor's key setting by id of the setting",
          "operationId": "GetCollectionAccessorKeySettingV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "id of the key setting",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeySettingResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "KeySettings"
          ],
          "summary": "Edits key settings",
          "operationId": "EditKeySettingsV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "id of the key setting to edit",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeySettingsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeySettingsRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeySettingsRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeySettingResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "KeySettings"
          ],
          "summary": "Deletes a collection accessor's key setting by id of the setting",
          "operationId": "DeleteCollectionAccessorKeySettingV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "id of the key setting",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{accessor_id}/license_plates": {
        "post": {
          "tags": [
            "LicensePlates"
          ],
          "summary": "Adds a new license plate for an assessor",
          "operationId": "PostLicensePlateV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "description": "Accessor ID",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLicensePlateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLicensePlateRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostLicensePlateRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicensePlateResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "LicensePlates"
          ],
          "summary": "Get license plates for an accessor",
          "operationId": "GetLicensePlatesV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "description": "Accessor ID",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicensePlateResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/accessors/{accessor_id}/license_plates/{license_plate_id}": {
        "get": {
          "tags": [
            "LicensePlates"
          ],
          "summary": "Get a license plate by ID",
          "operationId": "GetLicensePlateV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "description": "Accessor ID",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "license_plate_id",
              "in": "path",
              "description": "License Plate ID",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicensePlateResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "LicensePlates"
          ],
          "summary": "Update license plate",
          "operationId": "PatchLicensePlateV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "description": "Accessor ID",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "license_plate_id",
              "in": "path",
              "description": "License Plate ID to be updated",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchLicensePlateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchLicensePlateRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchLicensePlateRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicensePlateResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "LicensePlates"
          ],
          "summary": "Delete license plate",
          "operationId": "DeleteLicensePlateV1_2",
          "parameters": [
            {
              "name": "accessor_id",
              "in": "path",
              "description": "Accessor ID",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "license_plate_id",
              "in": "path",
              "description": "License Plate ID to be deleted",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/locks/{lock_id}/access/license_plates": {
        "get": {
          "tags": [
            "LicensePlatesAccess"
          ],
          "summary": "Returns a collection of all license plates that have access to a lock or will have access within the next 24 hours",
          "operationId": "GetLicensePlatesWithAccessV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "lock_id",
              "in": "path",
              "description": "ID of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/locks/{lock_id}/access/license_plates/{license_plate}": {
        "post": {
          "tags": [
            "LicensePlatesAccess"
          ],
          "summary": "Checks and grants access to a lock for a license plate",
          "operationId": "GrantLicensePlateAccessV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "description": "ID of the collection",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "lock_id",
              "in": "path",
              "description": "ID of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "license_plate",
              "in": "path",
              "description": "The license plate number to check",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicensePlateAccessResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/locks": {
        "post": {
          "tags": [
            "Locks"
          ],
          "summary": "Adds a new lock",
          "operationId": "AddLockV1_2",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLockRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLockRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostLockRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Locks"
          ],
          "summary": "Get the list of all locks (OData)",
          "operationId": "GetLocksV1_2",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/locks/{id}": {
        "get": {
          "tags": [
            "Locks"
          ],
          "summary": "Get lock by id",
          "operationId": "GetLockV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Locks"
          ],
          "summary": "Updates lock info",
          "operationId": "PatchLockPropertiesV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Update lock request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLockRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLockRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLockRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Locks"
          ],
          "summary": "Deletes lock",
          "operationId": "DeleteLockV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "force",
              "in": "query",
              "description": "If set to true (?force=true) deletes a related EOM schedule and lock accessor tags automatically.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/locks/{id}/easy_office_mode_schedule": {
        "get": {
          "tags": [
            "Locks"
          ],
          "summary": "Gets the Easy Office Mode for that lock if it exists",
          "operationId": "GetEomScheduleV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TimeScheduleSummaryResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Locks"
          ],
          "summary": "Updates the easy office mode schedule of the lock",
          "operationId": "PutEomScheduleV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeScheduleSummaryResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeScheduleSummaryResponse"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/TimeScheduleSummaryResponse"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TimeScheduleSummaryResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Locks"
          ],
          "summary": "Deletes the easy office mode schedule",
          "operationId": "DeleteEomScheduleV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/locks/{id}/update": {
        "patch": {
          "tags": [
            "Locks"
          ],
          "summary": "Updates lock info",
          "operationId": "PatchLockV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Update lock request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLockRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLockRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLockRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/v1.2/locks/{id}/locking": {
        "patch": {
          "tags": [
            "Locks"
          ],
          "summary": "Performs unlock action or puts the lock into the office mode",
          "operationId": "LockingV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Locking request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockingRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/LockingRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/LockingRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/locks/{id}/tag_registration": {
        "patch": {
          "tags": [
            "Locks"
          ],
          "summary": "Activates the lock tag registration mode",
          "operationId": "ActivateTagRegistrationV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Tag registration request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagRegistrationRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TagRegistrationRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/TagRegistrationRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/locks/{id}/detach": {
        "patch": {
          "tags": [
            "Locks"
          ],
          "summary": "Detaches the lock from the Iq",
          "operationId": "DetachLockV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Detach lock request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetachLockRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/DetachLockRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/DetachLockRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/locks/{id}/replace": {
        "patch": {
          "tags": [
            "Locks"
          ],
          "summary": "Replaces a lock with a new one",
          "operationId": "ReplaceLockV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock to be replaced",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Replace lock request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceLockRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceLockRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceLockRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/locks/{id}/offline_keys": {
        "get": {
          "tags": [
            "Locks"
          ],
          "summary": "Gets the keys which have offline access to this lock.",
          "operationId": "GetOfflineAccessKeysV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the lock",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeyResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Locks"
          ],
          "summary": "Update the keys which have offline access to this lock.",
          "operationId": "PatchOfflineAccessKeysV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the key",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeyOfflineAccessRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeyOfflineAccessRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchKeyOfflineAccessRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Locks"
          ],
          "summary": "Set the keys which have offline access to this lock.",
          "operationId": "PutOfflineAccessKeysV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the key",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutOfflineKeyAccessRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PutOfflineKeyAccessRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PutOfflineKeyAccessRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/accessors/{accessor_id}/nebula/installer": {
        "put": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Grants Nebula collection installer access to a Nebula user",
          "operationId": "GrantInstallerAccessV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutNebulaCollectionInstallerAccessRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PutNebulaCollectionInstallerAccessRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PutNebulaCollectionInstallerAccessRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        },
        "delete": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Revokes Nebula collection installer access",
          "operationId": "RevokeInstallerAccessV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/accessors/{accessor_id}/nebula": {
        "get": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Gets Nebula collection accessor",
          "operationId": "GetNebulaCollectionAssessorV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NebulaCollectionAccessorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/accessors/{accessor_id}/nebula/user": {
        "patch": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Updates Nebula user properties",
          "operationId": "UpdateNebulaUserV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchNebulaUserRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchNebulaUserRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchNebulaUserRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        },
        "post": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Creates a Nebula user for given accessor and collection",
          "operationId": "CreateNebulaUserV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostNebulaUserRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostNebulaUserRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostNebulaUserRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/accessors/{accessor_id}/nebula/card_key": {
        "post": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Assigns a physical card key to a Nebula user. Will be activated after presenting to online lock or encoder",
          "operationId": "AssignCardKeyV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignNebulaCardKeyRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignNebulaCardKeyRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AssignNebulaCardKeyRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        },
        "delete": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Cancels a Nebula physical card key",
          "operationId": "CancelCardKeyV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        },
        "get": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Gets a state of Nebula card key assigned to a Nebula user",
          "operationId": "GetCardKeyV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NebulaCardKeyResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/nebula/card_key": {
        "get": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Gets all Nebula card keys assigned to KS-managed Nebula users from a collection",
          "operationId": "GetCollectionCardKeysV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NebulaCardKeyResponse"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/accessors/{accessor_id}/nebula/digital_key": {
        "post": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Assigns a digital key to a Nebula user, which enables Nebula user to open a lock via Nebula mobile app",
          "operationId": "AssignDigitalKeyV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        },
        "delete": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Cancels a Nebula digital key",
          "operationId": "CancelDigitalKeyV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "accessor_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/nebula/iqs": {
        "post": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Synchronizes Nebula IQs online/offline status",
          "operationId": "SyncNebulaIqsV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        }
      },
      "/v1.2/collections/{collection_id}/nebula/locks": {
        "post": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Synchronizes Nebula locks online/offline status and battery level",
          "operationId": "SyncNebulaLocksV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "204": {
              "description": "No Content"
            }
          }
        },
        "get": {
          "tags": [
            "NebulaCollections"
          ],
          "summary": "Returns Nebula locks with Nebula-specific info",
          "operationId": "GetNebulaLocksV1_2",
          "parameters": [
            {
              "name": "collection_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NebulaLockResponse"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/repeaters": {
        "post": {
          "tags": [
            "Repeaters"
          ],
          "summary": "Add a new repeater",
          "operationId": "PostRepeaterV1_2",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostRepeaterRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostRepeaterRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PostRepeaterRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepeaterResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Repeaters"
          ],
          "summary": "Get the list of all repeaters (OData)",
          "operationId": "GetRepeatersV1_2",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepeaterResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/repeaters/{id}": {
        "get": {
          "tags": [
            "Repeaters"
          ],
          "summary": "Get repeater by id",
          "operationId": "GetRepeaterV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the repeater",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepeaterResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Repeaters"
          ],
          "summary": "Updates repeater info",
          "operationId": "PatchRepeaterV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the Repeater",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRepeaterRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRepeaterRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRepeaterRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepeaterResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Repeaters"
          ],
          "summary": "Deletes a Repeater",
          "operationId": "DeleteRepeaterV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/tags": {
        "get": {
          "tags": [
            "Tags"
          ],
          "summary": "Gets the list of all tags",
          "operationId": "GetTagsV1_2",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TagResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/tags/{id}": {
        "get": {
          "tags": [
            "Tags"
          ],
          "summary": "Get single tag info",
          "operationId": "GetTagV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TagResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Tags"
          ],
          "summary": "Updates a tag",
          "operationId": "UpdateTagV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the tag that will be updated",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTagRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTagRequest"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTagRequest"
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TagResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Tags"
          ],
          "summary": "Deletes tag",
          "operationId": "DeleteTagV1_2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of the tag to be deleted.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "force",
              "in": "query",
              "description": "If set to true (?force=true) deleting of the related accessor tags and lock accessor tags will be done automatically.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No Content"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/vendors/{vendor_id}": {
        "get": {
          "tags": [
            "Vendors"
          ],
          "summary": "Get Vendor by ID",
          "operationId": "GetVendorByIdV1_2",
          "parameters": [
            {
              "name": "vendor_id",
              "in": "path",
              "description": "Vendor ID",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VendorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/vendors/{reference}": {
        "get": {
          "tags": [
            "Vendors"
          ],
          "summary": "Get Vendor by reference",
          "operationId": "GetVendorByReferenceV1_2",
          "parameters": [
            {
              "name": "reference",
              "in": "path",
              "description": "Vendor reference, case insensitive",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VendorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1.2/vendors": {
        "get": {
          "tags": [
            "Vendors"
          ],
          "summary": "Get Vendors (OData)",
          "operationId": "GetVendorsV1_2",
          "parameters": [
            {
              "name": "$filter",
              "in": "query",
              "description": "Filter the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Order the results using OData syntax.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "The number of results to skip.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "The number of results to return.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Counts the total number of results.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VendorResponsePagedResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "AccessGroupResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "id of the Access Group",
              "format": "uuid"
            },
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the Access Group by the client",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "The id of the collection the Access Group is assigned",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "AccessGroupResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessGroupResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "AccessGroupTimeScheduleResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the time schedule",
              "format": "uuid"
            },
            "start_time": {
              "type": "string",
              "description": "The start of the time span on which this timeschedule is valid, for the selected days\r\nand date span.",
              "format": "date-span",
              "example": "10:00"
            },
            "end_time": {
              "type": "string",
              "description": "The end of the time span on which this timeschedule is valid, for the selected days and\r\ndate span.",
              "format": "date-span",
              "example": "17:00"
            },
            "start_date": {
              "type": "string",
              "description": "The date and time at which the timeschedule starts beeing valid",
              "format": "date-time",
              "nullable": true,
              "example": "2025-04-04T06:34:49.873"
            },
            "end_date": {
              "type": "string",
              "description": "The date and time at which the timeschedule stops being valid",
              "format": "date-time",
              "nullable": true,
              "example": "2025-04-04T06:34:49.873"
            },
            "monday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Monday between start and end datetimes",
              "example": true
            },
            "tuesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Tuesday between start and end datetimes",
              "example": true
            },
            "wednesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Wednesday between start and end datetimes",
              "example": true
            },
            "thursday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Thursday between start and end datetimes",
              "example": true
            },
            "friday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Friday between start and end datetimes",
              "example": true
            },
            "saturday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Saturday between start and end datetimes",
              "example": true
            },
            "sunday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Sunday between start and end datetimes",
              "example": true
            }
          },
          "additionalProperties": false
        },
        "AccessGroupTimeScheduleResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessGroupTimeScheduleResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "AccessorDeviceCertificateRequest": {
          "type": "object",
          "properties": {
            "public_key": {
              "type": "string",
              "description": "The public key of the device",
              "nullable": true
            },
            "expiry_date": {
              "type": "string",
              "description": "The expiry date of the device its keys",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        },
        "AccessorDeviceResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of Accessor Device",
              "format": "uuid"
            },
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the Accessor Device by the client",
              "nullable": true
            },
            "state": {
              "$ref": "#/components/schemas/AccessorDeviceState"
            },
            "mkey": {
              "$ref": "#/components/schemas/MkeyResponse"
            }
          },
          "additionalProperties": false
        },
        "AccessorDeviceResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessorDeviceResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "AccessorDeviceState": {
          "enum": [
            "none",
            "pending",
            "activated"
          ],
          "type": "string"
        },
        "AccessorFloorsResponse": {
          "type": "object",
          "properties": {
            "accessor_id": {
              "type": "string",
              "description": "Accessor identifier",
              "format": "uuid"
            },
            "floors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FloorResponse"
              },
              "description": "List of collection's floors to which accessor has access",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "AccessorPinRequest": {
          "type": "object",
          "properties": {
            "expiry_date": {
              "type": "string",
              "description": "Date and time in which this pin will expire.\r\nAllowed values are from 1 day up to 1 year.\r\nIf a pin must never expire please set expiry_date as null",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "AccessorResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The database id of the accessor",
              "format": "uuid"
            },
            "remote_access": {
              "type": "boolean",
              "description": "Indicates if the accessor can execute remote openings"
            },
            "blocked": {
              "type": "boolean",
              "description": "Indicates if the IQ is blocked (all tags and remote openings)"
            },
            "override_privacy_mode": {
              "type": "boolean",
              "description": "Indicates if the accessor can override privacy mode of a lock"
            },
            "toggle_easy_office_mode": {
              "type": "boolean",
              "description": "Indicates if the accessor can toggle easy office mode"
            },
            "toggle_manual_office_mode": {
              "type": "boolean",
              "description": "Indicates if the accessor can toggle manual office mode"
            },
            "collection_id": {
              "type": "string",
              "description": "The id of the collection the accessor is assigned",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "AccessorResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessorResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "AssignNebulaCardKeyRequest": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "description": "Card key UID, printed on the card",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "A model to assign a Nebula card key for a Nebula user"
        },
        "BatteryStates": {
          "enum": [
            "critical",
            "low",
            "good",
            "fresh",
            "none",
            "unknown"
          ],
          "type": "string"
        },
        "CertificateDataResponse": {
          "type": "object",
          "properties": {
            "certificate_data": {
              "type": "string",
              "description": "The value holds the device certificate data which needs to be signed",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "CertificateResponse": {
          "type": "object",
          "properties": {
            "certificate": {
              "type": "string",
              "description": "The value holds the device certificate",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "ChangePinRequest": {
          "required": [
            "accessor_id"
          ],
          "type": "object",
          "properties": {
            "accessor_id": {
              "type": "string",
              "description": "The accessor whose pin is being changed",
              "format": "uuid"
            },
            "otp": {
              "type": "string",
              "description": "A valid OTP generated with the current pin",
              "nullable": true
            },
            "delta": {
              "type": "string",
              "description": "The delta from old pin to the new pin",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "CollectionResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the collection",
              "format": "uuid"
            },
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the collection by the client",
              "nullable": true
            },
            "country_code": {
              "type": "string",
              "description": "The country where the collection is located",
              "nullable": true
            },
            "sync_mkey": {
              "type": "boolean",
              "description": "Whether the mkey should be synced across iqs in the collection"
            },
            "masterkey_id": {
              "type": "string",
              "description": "Id of Masterkey",
              "format": "uuid",
              "nullable": true
            },
            "default_installer_id": {
              "type": "string",
              "description": "Id of the default installer for the collection",
              "format": "uuid",
              "nullable": true,
              "deprecated": true
            },
            "default_installer_company_id": {
              "type": "string",
              "description": "Id of the default installer company for the collection",
              "format": "uuid",
              "nullable": true
            },
            "store_entry_events": {
              "type": "boolean",
              "description": "Whether the entry event logs shall be store for this collection. Default value is True."
            },
            "store_incident_events": {
              "type": "boolean",
              "description": "Whether the incident event logs shall be store for this collection. Default value is True."
            },
            "store_lam_audits": {
              "type": "boolean",
              "description": "Whether the lam sync logs shall be store for this collection. Default value is True."
            },
            "store_events_ttl": {
              "type": "string",
              "description": "Event retention TTL.",
              "format": "date-span",
              "nullable": true
            },
            "vendors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VendorResponse"
              },
              "description": "The list of vendors supported by collection",
              "nullable": true
            },
            "time_zone": {
              "type": "string",
              "description": "Collection's time zone.",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "CollectionResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CollectionResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "CollectionSettingResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "id of the collection setting",
              "format": "uuid"
            },
            "accessor_id": {
              "type": "string",
              "description": "id of the accessor",
              "format": "uuid"
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid"
            },
            "blocked": {
              "type": "boolean",
              "description": "Indicates if collection settings is blocked (all tags and remote openings)"
            },
            "remote_access": {
              "type": "boolean",
              "description": "Indicates if collection settings can execute remote openings",
              "nullable": true
            },
            "suspended": {
              "type": "boolean",
              "description": "Indicates if collection settings is suspended or not"
            },
            "toggle_easy_office_mode": {
              "type": "boolean",
              "description": "Indicates if collection settings can toggle easy office mode",
              "nullable": true
            },
            "toggle_manual_office_mode": {
              "type": "boolean",
              "description": "Indicates if collection settings can toggle manual office mode",
              "nullable": true
            },
            "override_privacy_mode": {
              "type": "boolean",
              "description": "Indicates if collection settings can override privacy mode of a lock",
              "nullable": true
            },
            "use_pin": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can use pin locks."
            }
          },
          "additionalProperties": false
        },
        "CollectionSettingResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CollectionSettingResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "DataSyncState": {
          "enum": [
            "synced",
            "pending",
            "not_synced",
            "failed"
          ],
          "type": "string"
        },
        "DeletePinRequest": {
          "required": [
            "accessor_id"
          ],
          "type": "object",
          "properties": {
            "accessor_id": {
              "type": "string",
              "description": "The accessor who is deleting the pin",
              "format": "uuid"
            },
            "otp": {
              "type": "string",
              "description": "The OTP necessary for updating to reset state",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "DetachLockRequest": {
          "type": "object",
          "properties": {
            "iq_link_state": {
              "$ref": "#/components/schemas/IqLinkState"
            },
            "otp": {
              "type": "string",
              "description": "A valid otp",
              "nullable": true
            },
            "accessor_id": {
              "type": "string",
              "description": "The accessor from whom this request originates",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "Request to detach a lock from an IQ"
        },
        "EntryResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the entry",
              "format": "uuid"
            },
            "event_category": {
              "type": "string",
              "description": "The category of the event",
              "nullable": true
            },
            "event_detail": {
              "type": "string",
              "description": "Additional details of the event",
              "nullable": true
            },
            "utc_date_time": {
              "type": "string",
              "description": "The UTC timestamp that marks when the event happened",
              "format": "date-time"
            },
            "local_date_time": {
              "type": "string",
              "description": "The timestamp that marks when the event happened but converted to the timezone of the IQ\r\nthe lock is connected to",
              "format": "date-time"
            },
            "lock_id": {
              "type": "string",
              "description": "id of the lock",
              "format": "uuid",
              "nullable": true
            },
            "lock_customer_reference": {
              "type": "string",
              "description": "Name of the lock",
              "nullable": true
            },
            "lock_mac_address": {
              "type": "string",
              "description": "Mac address of the lock",
              "nullable": true
            },
            "accessor_id": {
              "type": "string",
              "description": "id of the Accessor",
              "format": "uuid",
              "nullable": true
            },
            "iq_id": {
              "type": "string",
              "description": "id of the IQ",
              "format": "uuid",
              "nullable": true
            },
            "iq_customer_reference": {
              "type": "string",
              "description": "Name of the IQ",
              "nullable": true
            },
            "iq_mac_address": {
              "type": "string",
              "description": "Mac address of the IQ",
              "nullable": true
            },
            "iq_revision": {
              "type": "string",
              "description": "Iq version",
              "nullable": true,
              "example": "1.0 or 2.0"
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            },
            "collection_customer_reference": {
              "type": "string",
              "description": "Name of the collection",
              "nullable": true
            },
            "exit_requested": {
              "type": "boolean",
              "description": "Indicates if it is an exit event."
            },
            "access_by": {
              "type": "string",
              "description": "What was used for access (tag, remote, etc.)",
              "nullable": true
            },
            "access_detail": {
              "type": "string",
              "description": "Access Details (i.e. tag number when AccessBy is tag)",
              "nullable": true
            },
            "expiration_date_time": {
              "type": "string",
              "description": "Event expiration time in UTC, shows when event will be deleted.",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "EntryResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntryResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "ErrorResponse": {
          "type": "object",
          "properties": {
            "ErrorCode": {
              "type": "string",
              "nullable": true,
              "readOnly": true
            },
            "Message": {
              "type": "string",
              "nullable": true,
              "readOnly": true
            }
          },
          "additionalProperties": false
        },
        "EthernetNetworkInterfaceResponse": {
          "type": "object",
          "properties": {
            "priority": {
              "type": "integer",
              "description": "The priority of the network interface",
              "format": "int32",
              "nullable": true
            },
            "status": {
              "$ref": "#/components/schemas/NetworkInterfaceStatus"
            },
            "mac_address": {
              "type": "string",
              "description": "The mac address of the network interface",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "FloorPatchRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "nullable": true
            },
            "number": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "lock_to_add_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "nullable": true
            },
            "lock_to_remove_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "FloorRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "nullable": true
            },
            "number": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "lock_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "FloorResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "customer_reference": {
              "type": "string",
              "nullable": true
            },
            "number": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "lock_count": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "FloorResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FloorResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "GetPinResponse": {
          "type": "object",
          "properties": {
            "pin": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "GetSecretResponse": {
          "type": "object",
          "properties": {
            "secret": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "GetSignalStrengthResponse": {
          "type": "object",
          "properties": {
            "signal_strength": {
              "type": "integer",
              "description": "The value can be between 0 and 31 - 31 being the best/strongest signal strength",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "GetSoftwareVersionsResponse": {
          "type": "object",
          "properties": {
            "modem_application_version": {
              "type": "string",
              "description": "The version of the application running on the 2G modem",
              "nullable": true
            },
            "modem_firmware_version": {
              "type": "string",
              "description": "the firmware version of the 2G modem",
              "nullable": true
            },
            "router_firmware_version": {
              "type": "string",
              "description": "The firmware version of the router",
              "nullable": true
            },
            "node_firmware_version": {
              "type": "string",
              "description": "The firmware version of the node",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "HardwareCommunicationType": {
          "enum": [
            "rf_net",
            "blue_net"
          ],
          "type": "string"
        },
        "HardwareType": {
          "enum": [
            "lock",
            "repeater"
          ],
          "type": "string"
        },
        "IncidentResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the incident",
              "format": "uuid"
            },
            "event_category": {
              "type": "string",
              "description": "The category of the event",
              "nullable": true
            },
            "event_detail": {
              "type": "string",
              "description": "Additional details of the event",
              "nullable": true
            },
            "utc_date_time": {
              "type": "string",
              "description": "The UTC timestamp that marks when the event happened",
              "format": "date-time"
            },
            "local_date_time": {
              "type": "string",
              "description": "The timestamp that marks when the event happened but converted to the timezone of the IQ the lock is connected to",
              "format": "date-time"
            },
            "lock_id": {
              "type": "string",
              "description": "id of the lock",
              "format": "uuid",
              "nullable": true
            },
            "lock_customer_reference": {
              "type": "string",
              "description": "Name of the lock",
              "nullable": true
            },
            "lock_mac_address": {
              "type": "string",
              "description": "Mac address of the lock",
              "nullable": true
            },
            "iq_id": {
              "type": "string",
              "description": "id of the IQ",
              "format": "uuid",
              "nullable": true
            },
            "iq_customer_reference": {
              "type": "string",
              "description": "Name of the IQ",
              "nullable": true
            },
            "iq_mac_address": {
              "type": "string",
              "description": "Mac address of the IQ",
              "nullable": true
            },
            "iq_revision": {
              "type": "string",
              "description": "Iq version",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            },
            "collection_customer_reference": {
              "type": "string",
              "description": "Name of the collection",
              "nullable": true
            },
            "expiration_date_time": {
              "type": "string",
              "description": "Event expiration time in UTC, shows when event will be deleted.",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "IncidentResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IncidentResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "IqDetailsResponse": {
          "type": "object",
          "properties": {
            "rf_info": {
              "$ref": "#/components/schemas/IqRfInfoResponse"
            },
            "network_details": {
              "$ref": "#/components/schemas/IqNetworkInterfaceResponse"
            }
          },
          "additionalProperties": false
        },
        "IqLedPattern": {
          "enum": [
            "green_blink_every_5_min",
            "permanent_green",
            "blink_red_every_second",
            "blink_green_every_second",
            "blink_blue_every_second",
            "red_blue_every_2_seconds",
            "red_green_every_2_seconds",
            "green_blue_every_2_seconds",
            "rgb_every_5_seconds",
            "permanent_white",
            "blink_white_every_5_minutes",
            "off"
          ],
          "type": "string"
        },
        "IqLinkState": {
          "enum": [
            "attached_pending",
            "attached",
            "detached",
            "detached_pending"
          ],
          "type": "string"
        },
        "IqNetworkInterfaceResponse": {
          "type": "object",
          "properties": {
            "m2m": {
              "$ref": "#/components/schemas/M2MNetworkInterfaceResponse"
            },
            "ethernet": {
              "$ref": "#/components/schemas/EthernetNetworkInterfaceResponse"
            },
            "wifi": {
              "$ref": "#/components/schemas/WifiNetworkInterfaceResponse"
            }
          },
          "additionalProperties": false
        },
        "IqPinResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of Iq Pin",
              "format": "uuid"
            },
            "accessor": {
              "$ref": "#/components/schemas/AccessorResponse"
            },
            "activation_state": {
              "$ref": "#/components/schemas/PinActivationState"
            },
            "activation_date": {
              "type": "string",
              "description": "The first activation datetime",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "IqPinResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IqPinResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "IqResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The database id of the IQ",
              "format": "uuid"
            },
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the IQ by the client",
              "nullable": true
            },
            "time_zone": {
              "type": "string",
              "description": "Timezone of the IQ",
              "nullable": true
            },
            "subscribed": {
              "type": "boolean",
              "description": "The subscription state of the iq. If changed a command is queued to send to the IQ.",
              "nullable": true
            },
            "otp_enabled": {
              "type": "boolean",
              "description": "If Enabled secure commands need to use OTPs. Once enabled it cannot be disabled.",
              "nullable": true
            },
            "led_enabled": {
              "type": "boolean",
              "description": "If enabled IQ blinks green every 5 minutes, if not it does not blink",
              "nullable": true
            },
            "led_pattern": {
              "$ref": "#/components/schemas/IqLedPattern"
            },
            "mac": {
              "type": "string",
              "description": "The first 6 digits of the activation code written on the physical IQ",
              "nullable": true
            },
            "operator": {
              "type": "string",
              "description": "The name of the Operator the IQ is connected to",
              "nullable": true
            },
            "state": {
              "$ref": "#/components/schemas/IqState"
            },
            "restore_required": {
              "type": "boolean",
              "description": "If the IQ was reset, restore actions need to be taken - like resetting the tree"
            },
            "reset_date": {
              "type": "string",
              "description": "The last time stamp when the IQ was reset",
              "format": "date-time",
              "nullable": true
            },
            "online": {
              "type": "boolean",
              "description": "The connection state of the IQ to the cloud."
            },
            "data_sync_state": {
              "$ref": "#/components/schemas/DataSyncState"
            },
            "signal_strength": {
              "type": "integer",
              "description": "Shows the mobile network connection strangth of the IQ.",
              "format": "int32"
            },
            "collection_id": {
              "type": "string",
              "description": "The id of the collection the IQ is assigned",
              "format": "uuid",
              "nullable": true
            },
            "revision": {
              "type": "string",
              "description": "Iq version",
              "nullable": true
            },
            "vendor": {
              "$ref": "#/components/schemas/VendorResponse"
            }
          },
          "additionalProperties": false
        },
        "IqResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IqResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "IqRfInfoResponse": {
          "type": "object",
          "properties": {
            "request_date": {
              "type": "string",
              "format": "date-time"
            },
            "channel": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "IqState": {
          "enum": [
            "factory",
            "initialized",
            "installation",
            "active",
            "dead"
          ],
          "type": "string"
        },
        "IqSummaryResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "id of the IQ",
              "format": "uuid"
            },
            "customer_reference": {
              "type": "string",
              "description": "Name of the IQ",
              "nullable": true
            },
            "mac_address": {
              "type": "string",
              "description": "Mac address of the IQ",
              "nullable": true
            },
            "is_online": {
              "type": "boolean",
              "description": "Is IQ online or not"
            },
            "collection_id": {
              "type": "string",
              "description": "The id of the collection the IQ is assigned",
              "format": "uuid",
              "nullable": true
            },
            "revision": {
              "type": "string",
              "description": "Iq version",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "IqTreeItem": {
          "required": [
            "hardware_type",
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the hardware (lock|repeater)",
              "format": "uuid"
            },
            "parent_id": {
              "type": "string",
              "description": "The id of the parent HW",
              "format": "uuid",
              "nullable": true
            },
            "hardware_type": {
              "$ref": "#/components/schemas/HardwareType"
            }
          },
          "additionalProperties": false,
          "description": "Represents a tree item"
        },
        "IqTreeResponse": {
          "required": [
            "hardware_type",
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the hardware (lock|repeater)",
              "format": "uuid"
            },
            "parent_id": {
              "type": "string",
              "description": "The id of the parent HW",
              "format": "uuid",
              "nullable": true
            },
            "hardware_type": {
              "$ref": "#/components/schemas/HardwareType"
            },
            "mac": {
              "type": "string",
              "description": "The mac adress of the hardware (lock|repeater)",
              "nullable": true
            },
            "customer_reference": {
              "type": "string",
              "description": "The name/reference given to the hardware by the client",
              "nullable": true
            },
            "lock_type": {
              "$ref": "#/components/schemas/LockType"
            },
            "is_online": {
              "type": "boolean",
              "description": "If the hardware is online"
            },
            "is_attached": {
              "type": "boolean",
              "description": "If the hardware is attached"
            },
            "iq_link_state": {
              "$ref": "#/components/schemas/IqLinkState"
            },
            "battery_state": {
              "$ref": "#/components/schemas/BatteryStates"
            },
            "communication_type": {
              "$ref": "#/components/schemas/HardwareCommunicationType"
            },
            "signal_strength": {
              "type": "integer",
              "description": "Signal strength indicator between the hardware and its attached IQ",
              "format": "int32",
              "nullable": true
            },
            "signal_strength_last_update": {
              "type": "string",
              "description": "Timestamp of the last update of signal strength indicator between the hardware and its attached IQ",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "Represents a tree item"
        },
        "KeyResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the key",
              "format": "uuid"
            },
            "key_id": {
              "type": "string",
              "description": "The id of the tag or mkey",
              "format": "uuid"
            },
            "key_number": {
              "type": "string",
              "description": "Shows the tag number for a tag",
              "nullable": true
            },
            "key_type": {
              "$ref": "#/components/schemas/KeyType"
            },
            "accessor_id": {
              "type": "string",
              "description": "The id of the accessor",
              "format": "uuid"
            },
            "blocked": {
              "type": "boolean",
              "description": "Indicates if this key is blocked"
            },
            "vendors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VendorResponse"
              },
              "description": "Vendors supported by the key",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "KeyResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/KeyResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "KeySettingResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "accessor_key_id": {
              "type": "string",
              "format": "uuid"
            },
            "blocked": {
              "type": "boolean"
            },
            "offline_access_type": {
              "$ref": "#/components/schemas/OfflineAccessType"
            }
          },
          "additionalProperties": false
        },
        "KeySettingResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/KeySettingResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "KeyType": {
          "enum": [
            "tag",
            "mkey",
            "pin",
            "wallet",
            "license_plate",
            "custom_pin"
          ],
          "type": "string"
        },
        "LicensePlateAccessResponse": {
          "type": "object",
          "properties": {
            "access_granted": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "LicensePlateResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "License plate ID",
              "format": "uuid"
            },
            "license_plate": {
              "type": "string",
              "description": "License plate number",
              "nullable": true
            },
            "blocked": {
              "type": "boolean",
              "description": "A boolean flag indicating if the license plate is blocked or not"
            }
          },
          "additionalProperties": false,
          "description": "License plate entity representation for API responses"
        },
        "LicensePlateResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LicensePlateResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "LockResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The database id of the lock",
              "format": "uuid"
            },
            "mac": {
              "type": "string",
              "description": "Mac address",
              "nullable": true
            },
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the lock by the client",
              "nullable": true,
              "example": "Entrance Floor Repeater1"
            },
            "locked_state": {
              "$ref": "#/components/schemas/LockState"
            },
            "lock_type": {
              "$ref": "#/components/schemas/LockType"
            },
            "online": {
              "type": "boolean",
              "description": "Online state"
            },
            "iq_link_state": {
              "$ref": "#/components/schemas/IqLinkState"
            },
            "tag_registration_state": {
              "$ref": "#/components/schemas/TagRegistrationState"
            },
            "battery_level": {
              "$ref": "#/components/schemas/BatteryStates"
            },
            "left_open_alarm": {
              "type": "boolean",
              "description": "ILock left unlocked alarm on"
            },
            "intrusion_alarm": {
              "type": "boolean",
              "description": "Intrusion alarm on"
            },
            "collection_id": {
              "type": "string",
              "description": "The id of the collection the lock is assigned",
              "format": "uuid",
              "nullable": true
            },
            "privacy_mode": {
              "type": "boolean",
              "description": "Indicates if locks privacy mode is enabled"
            },
            "communication_type": {
              "$ref": "#/components/schemas/HardwareCommunicationType"
            },
            "iq": {
              "$ref": "#/components/schemas/IqSummaryResponse"
            },
            "repeater": {
              "$ref": "#/components/schemas/RepeaterSummaryResponse"
            },
            "easy_office_mode_schedule": {
              "$ref": "#/components/schemas/TimeScheduleResponse"
            },
            "floor": {
              "$ref": "#/components/schemas/FloorResponse"
            },
            "signal_strength": {
              "type": "integer",
              "description": "Signal strength indicator between the lock and its attached IQ",
              "format": "int32",
              "nullable": true
            },
            "signal_strength_last_update": {
              "type": "string",
              "description": "Timestamp of the last update of signal strength indicator between the lock and its attached IQ",
              "format": "date-time",
              "nullable": true
            },
            "license_plate_camera": {
              "type": "boolean",
              "description": "A boolean property indicating if a license plate recognition camera is attached to the Lock."
            },
            "vendor": {
              "$ref": "#/components/schemas/VendorResponse"
            }
          },
          "additionalProperties": false
        },
        "LockResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "LockState": {
          "enum": [
            "none",
            "locked",
            "office_mode",
            "uncertain",
            "locked_pending",
            "office_mode_pending"
          ],
          "type": "string"
        },
        "LockSummaryResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the lock",
              "format": "uuid"
            },
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the lock by the client",
              "nullable": true
            },
            "mac_address": {
              "type": "string",
              "description": "Mac address of the lock",
              "nullable": true
            },
            "is_online": {
              "type": "boolean",
              "description": "Online status of the lock"
            },
            "collection_id": {
              "type": "string",
              "description": "The identifier of the collection the lock is assigned to",
              "format": "uuid",
              "nullable": true
            },
            "floor_id": {
              "type": "string",
              "description": "The identifier of the floor the lock is assigned to",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "LockSummaryResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockSummaryResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "LockType": {
          "enum": [
            "none",
            "unknown",
            "escutcheon",
            "cylinder",
            "wall_reader",
            "locker_lock",
            "escutcheon_pin",
            "wall_reader_pin"
          ],
          "type": "string"
        },
        "LockingRequest": {
          "required": [
            "locked_state"
          ],
          "type": "object",
          "properties": {
            "locked_state": {
              "$ref": "#/components/schemas/RequestLockStates"
            },
            "accessor_id": {
              "type": "string",
              "description": "The accessor from whom this request originates",
              "format": "uuid",
              "nullable": true
            },
            "otp": {
              "type": "string",
              "description": "A valid otp",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "M2MNetworkInterfaceResponse": {
          "type": "object",
          "properties": {
            "priority": {
              "type": "integer",
              "description": "The priority of the network interface",
              "format": "int32",
              "nullable": true
            },
            "status": {
              "$ref": "#/components/schemas/NetworkInterfaceStatus"
            }
          },
          "additionalProperties": false
        },
        "MkeyDataResponse": {
          "type": "object",
          "properties": {
            "mkey_data": {
              "type": "string",
              "description": "The value holds the encrypted mkey data",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "MkeyResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the tag",
              "format": "uuid"
            },
            "expiry_date": {
              "type": "string",
              "description": "The date the mkey expires.",
              "format": "date-time"
            },
            "uid": {
              "type": "string",
              "description": "The UID of the tag",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "NebulaCardKeyResponse": {
          "type": "object",
          "properties": {
            "accessor_id": {
              "type": "string",
              "description": "KS accessor reference",
              "format": "uuid"
            },
            "collection_id": {
              "type": "string",
              "description": "KS collection reference",
              "format": "uuid"
            },
            "state": {
              "$ref": "#/components/schemas/NebulaCardKeyState"
            },
            "outdated": {
              "type": "boolean",
              "description": "Indicates whether this card key has pending updates or not"
            },
            "uid": {
              "type": "string",
              "description": "Nebula card key UID",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "NebulaCardKeyState": {
          "enum": [
            "Unknown",
            "Unspecified",
            "NotAssigned",
            "Pending",
            "Active"
          ],
          "type": "string"
        },
        "NebulaCollectionAccessorResponse": {
          "type": "object",
          "properties": {
            "accessor_id": {
              "type": "string",
              "description": "KS accessor reference",
              "format": "uuid"
            },
            "collection_id": {
              "type": "string",
              "description": "KS collection reference",
              "format": "uuid"
            },
            "policy_role": {
              "type": "string",
              "description": "An IAM Role added for the user. See https://developer.saltosystems.com/nebula/guides/iam/ for details",
              "nullable": true,
              "example": "iam-roles/device.admin"
            }
          },
          "additionalProperties": false,
          "description": "Nebula collection accessor response model"
        },
        "NebulaLockResponse": {
          "type": "object",
          "properties": {
            "lock_id": {
              "type": "string",
              "format": "uuid"
            },
            "initialized": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "NetworkInterfaceStatus": {
          "enum": [
            "unavailable",
            "disconnected",
            "connecting",
            "connected",
            "connection_failed",
            "active"
          ],
          "type": "string"
        },
        "OfflineAccessType": {
          "enum": [
            "by_access",
            "by_offline_keys"
          ],
          "type": "string"
        },
        "PatchAccessGroupRelationRequest": {
          "type": "object",
          "properties": {
            "add_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "Represents a list of to be added relations from an access group",
              "nullable": true
            },
            "remove_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "Represents a list of to be deleted relations from an access group",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "A request to remove/add relations from an access group"
        },
        "PatchAccessGroupRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the Access Group by the client",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PatchAccessorDeviceCertificateRequest": {
          "type": "object",
          "properties": {
            "signature": {
              "type": "string",
              "nullable": true
            },
            "vault_type": {
              "$ref": "#/components/schemas/VaultType"
            }
          },
          "additionalProperties": false
        },
        "PatchAccessorRequest": {
          "type": "object",
          "properties": {
            "remote_access": {
              "type": "boolean",
              "description": "Indicates if the accessor can execute remote openings",
              "nullable": true
            },
            "blocked": {
              "type": "boolean",
              "description": "Indicates if the IQ is blocked (all tags and remote openings)",
              "nullable": true
            },
            "override_privacy_mode": {
              "type": "boolean",
              "description": "Indicates if the accessor can override privacy mode of a lock",
              "nullable": true
            },
            "toggle_easy_office_mode": {
              "type": "boolean",
              "description": "Indicates if the accessor can toggle easy office mode",
              "nullable": true
            },
            "toggle_manual_office_mode": {
              "type": "boolean",
              "description": "Indicates if the accessor can toggle manual office mode",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PatchCollectionRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the collection by the client",
              "nullable": true,
              "example": "Building 247"
            },
            "country_code": {
              "type": "string",
              "description": "The country where the collection is located",
              "nullable": true
            },
            "sync_mkey": {
              "type": "boolean",
              "description": "Enables digital key synchronisation across all IQs in the collection",
              "nullable": true
            },
            "masterkey_id": {
              "type": "string",
              "description": "Id of the master key in the collection",
              "format": "uuid",
              "nullable": true
            },
            "store_entry_events": {
              "type": "boolean",
              "description": "Whether the entry event logs shall be store for this collection. Default value is True.",
              "nullable": true
            },
            "store_incident_events": {
              "type": "boolean",
              "description": "Whether the incident event logs shall be store for this collection. Default value is True.",
              "nullable": true
            },
            "store_lam_audits": {
              "type": "boolean",
              "description": "Whether the lam sync logs shall be store for this collection. Default value is True.",
              "nullable": true
            },
            "store_events_ttl": {
              "type": "string",
              "description": "Event retention TTL.\r\n\u003Cexample\u003E'365.00:00:00' for one year.\u003C/example\u003E",
              "format": "date-span",
              "nullable": true
            },
            "vendor_compatibility": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Vendors that the collection supports. Default is \"sallis\" when empty. Case-insensitive",
              "nullable": true
            },
            "time_zone": {
              "type": "string",
              "description": "Collection's time zone.",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PatchCollectionSettingRequest": {
          "type": "object",
          "properties": {
            "blocked": {
              "type": "boolean",
              "description": "Indicates if the collection accessor is blocked (all tags and remote openings)"
            },
            "remote_access": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can execute remote openings",
              "nullable": true
            },
            "suspended": {
              "type": "boolean",
              "description": "Indicates if collection settings is suspended or not",
              "nullable": true
            },
            "toggle_easy_office_mode": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can toggle easy office mode",
              "nullable": true
            },
            "toggle_manual_office_mode": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can toggle manual office mode",
              "nullable": true
            },
            "override_privacy_mode": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can override privacy mode of a lock",
              "nullable": true
            },
            "use_pin": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can use pin locks."
            }
          },
          "additionalProperties": false
        },
        "PatchIqRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the IQ by the client",
              "nullable": true,
              "example": "Entrance Floor IQ1"
            },
            "subscribed": {
              "type": "boolean",
              "description": "If the IQ subscription should be turned on or off",
              "nullable": true
            },
            "time_zone": {
              "type": "string",
              "description": "Timezone of the IQ",
              "nullable": true
            },
            "otp_enabled": {
              "type": "boolean",
              "description": "If the IQ otp security should be turned on",
              "nullable": true
            },
            "led_enabled": {
              "type": "boolean",
              "description": "If the IQ LED heartbeat should be turned on or off",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            },
            "led_pattern": {
              "$ref": "#/components/schemas/IqLedPattern"
            }
          },
          "additionalProperties": false
        },
        "PatchKeyOfflineAccessRequest": {
          "type": "object",
          "properties": {
            "add_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "Represents a list of to be added relations to offline access keys/locks",
              "nullable": true
            },
            "remove_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "Represents a list of to be deleted relations to offline access keys/locks",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PatchKeyRequest": {
          "type": "object",
          "properties": {
            "key_id": {
              "type": "string",
              "description": "Id of the new key",
              "format": "uuid",
              "nullable": true
            },
            "blocked": {
              "type": "boolean",
              "description": "Indicates if this key is blocked"
            }
          },
          "additionalProperties": false
        },
        "PatchKeySettingsRequest": {
          "type": "object",
          "properties": {
            "blocked": {
              "type": "boolean",
              "description": "Indicates if the key is blocked"
            },
            "offline_access_type": {
              "$ref": "#/components/schemas/OfflineAccessType"
            }
          },
          "additionalProperties": false
        },
        "PatchLicensePlateRequest": {
          "type": "object",
          "properties": {
            "license_plate": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "License plate number. Only alphanumeric symbols will be saved, whitespaces and dashes are removed",
              "nullable": true
            },
            "blocked": {
              "type": "boolean",
              "description": "A property indicating if the license plate should be blocked or not. Locks cannot be unlocked using a blocked license plate"
            }
          },
          "additionalProperties": false,
          "description": "Represents a model to update License Plate entity"
        },
        "PatchNebulaUserRequest": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Nebula user email",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "Updateable Nebula user request model"
        },
        "PatchRepeaterRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the Repeater by the client",
              "nullable": true,
              "example": "Garage Repeater"
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PatchTimeScheduleRequest": {
          "type": "object",
          "properties": {
            "monday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Monday between start and end datetimes",
              "nullable": true,
              "example": true
            },
            "tuesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Tuesday between start and end datetimes",
              "nullable": true,
              "example": true
            },
            "wednesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Wednesday between start and end datetimes",
              "nullable": true,
              "example": true
            },
            "thursday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Thursday between start and end datetimes",
              "nullable": true,
              "example": true
            },
            "friday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Friday between start and end datetimes",
              "nullable": true,
              "example": true
            },
            "saturday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Saturday between start and end datetimes",
              "nullable": true,
              "example": true
            },
            "sunday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Sunday between start and end datetimes",
              "nullable": true,
              "example": true
            },
            "start_time": {
              "type": "string",
              "description": "The start of the time span on which this timeschedule is valid, for the selected days\r\nand date span.",
              "format": "date-span",
              "nullable": true,
              "example": "10:00"
            },
            "end_time": {
              "type": "string",
              "description": "The end of the time span on which this timeschedule is valid, for the selected days and\r\ndate span.",
              "format": "date-span",
              "nullable": true,
              "example": "17:00"
            },
            "start_date": {
              "type": "string",
              "description": "The date and time at which the timeschedule starts beeing valid",
              "format": "date-time",
              "nullable": true,
              "example": "2017-07-30T00:00:00Z"
            },
            "end_date": {
              "type": "string",
              "description": "The date and time at which the timeschedule stops being valid",
              "format": "date-time",
              "nullable": true,
              "example": "2017-07-30T00:00:00Z"
            }
          },
          "additionalProperties": false
        },
        "PinActivationState": {
          "enum": [
            "inactive",
            "active"
          ],
          "type": "string"
        },
        "PostAccessGroupRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the Access Group by the client",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PostAccessorDeviceRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the device",
              "nullable": true
            },
            "device_uid": {
              "type": "string",
              "description": "Unique identifier of the device",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PostAccessorRequest": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The desired Id of the entity (must be unique)",
              "format": "uuid",
              "nullable": true
            },
            "remote_access": {
              "type": "boolean",
              "description": "Indicates if the accessor can execute remote openings"
            },
            "blocked": {
              "type": "boolean",
              "description": "Indicates if the accessor is blocked (all tags and remote openings)"
            },
            "override_privacy_mode": {
              "type": "boolean",
              "description": "Indicates if the accessor can override privacy mode of a lock"
            },
            "toggle_easy_office_mode": {
              "type": "boolean",
              "description": "Indicates if the accessor can toggle easy office mode"
            },
            "toggle_manual_office_mode": {
              "type": "boolean",
              "description": "Indicates if the accessor can toggle manual office mode"
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PostCollectionRequest": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The desired Id of the entity (must be unique)",
              "format": "uuid",
              "nullable": true
            },
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the collection by the client",
              "nullable": true
            },
            "country_code": {
              "type": "string",
              "description": "The country where the collection is located",
              "nullable": true
            },
            "sync_mkey": {
              "type": "boolean",
              "description": "Whether the mkey should be synced across iqs in the collection, default true",
              "nullable": true
            },
            "masterkey_id": {
              "type": "string",
              "description": "Master key identifier",
              "format": "uuid",
              "nullable": true
            },
            "installer_company_id": {
              "type": "string",
              "description": "Id of the installer company for the collection",
              "format": "uuid",
              "nullable": true
            },
            "store_entry_events": {
              "type": "boolean",
              "description": "Whether the entry event logs shall be store for this collection. Default value is True.",
              "nullable": true
            },
            "store_incident_events": {
              "type": "boolean",
              "description": "Whether the incident event logs shall be store for this collection. Default value is True.",
              "nullable": true
            },
            "store_lam_audits": {
              "type": "boolean",
              "description": "Whether the lam sync logs shall be store for this collection. Default value is True.",
              "nullable": true
            },
            "store_events_ttl": {
              "type": "string",
              "description": "Event retention TTL.\r\n\u003Cexample\u003E'365.00:00:00' for one year.\u003C/example\u003E",
              "format": "date-span",
              "nullable": true
            },
            "vendor_compatibility": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Vendors that the collection is created for. Default is \"sallis\" when empty. Case-insensitive",
              "nullable": true
            },
            "time_zone": {
              "type": "string",
              "description": "Collection's time zone.",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PostCollectionSettingRequest": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The desired Id of the entity (must be unique)",
              "format": "uuid",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid"
            },
            "blocked": {
              "type": "boolean",
              "description": "Indicates if the collection accessor is blocked (all tags and remote openings)"
            },
            "remote_access": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can execute remote openings",
              "nullable": true
            },
            "suspended": {
              "type": "boolean",
              "description": "Indicates if collection settings is suspended or not",
              "nullable": true
            },
            "toggle_easy_office_mode": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can toggle easy office mode",
              "nullable": true
            },
            "toggle_manual_office_mode": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can toggle manual office mode",
              "nullable": true
            },
            "override_privacy_mode": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can override privacy mode of a lock",
              "nullable": true
            },
            "use_pin": {
              "type": "boolean",
              "description": "Indicates if the collection accessor can use pin locks."
            }
          },
          "additionalProperties": false
        },
        "PostIqRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the IQ by the client",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "Identifier of the collection",
              "format": "uuid",
              "nullable": true
            },
            "time_zone": {
              "type": "string",
              "description": "Timezone of the IQ",
              "nullable": true
            },
            "activation_code": {
              "type": "string",
              "description": "The activation code as written on the physical IQ",
              "nullable": true
            },
            "subscribed": {
              "type": "boolean",
              "description": "Turns on IQ subscription",
              "nullable": true
            },
            "otp_enabled": {
              "type": "boolean",
              "description": "Enables OTP validation"
            },
            "is_installation": {
              "type": "boolean",
              "description": "Identifies whether IQ is activated during installation"
            },
            "vendor": {
              "type": "string",
              "description": "Vendor of the IQ. Default is \"sallis\" when empty. Case-insensitive",
              "nullable": true,
              "example": "sallis,nebula"
            }
          },
          "additionalProperties": false,
          "description": "Request Object"
        },
        "PostKeyRequest": {
          "required": [
            "tag_id"
          ],
          "type": "object",
          "properties": {
            "tag_id": {
              "type": "string",
              "description": "Id of the tag",
              "format": "uuid"
            },
            "blocked": {
              "type": "boolean",
              "description": "If the tag should be blocked"
            }
          },
          "additionalProperties": false
        },
        "PostKeySettingsRequest": {
          "type": "object",
          "properties": {
            "accessor_key_id": {
              "type": "string",
              "description": "Id of the accessor key",
              "format": "uuid"
            },
            "blocked": {
              "type": "boolean",
              "description": "Indicates if the key is blocked"
            },
            "offline_access_type": {
              "$ref": "#/components/schemas/OfflineAccessType"
            }
          },
          "additionalProperties": false
        },
        "PostLicensePlateRequest": {
          "type": "object",
          "properties": {
            "license_plate": {
              "type": "string",
              "description": "License plate number. Only alphanumeric symbols will be saved, whitespaces and dashes are removed",
              "nullable": true
            },
            "blocked": {
              "type": "boolean",
              "description": "A property indicating if the license plate should be blocked or not. Locks cannot be unlocked using a blocked license plate"
            }
          },
          "additionalProperties": false,
          "description": "A request representing a license plate to be created"
        },
        "PostLockRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the Lock by the client",
              "nullable": true
            },
            "activation_code": {
              "type": "string",
              "description": "The activation code as written on the physical Lock",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            },
            "license_plate_camera": {
              "type": "boolean",
              "description": "A boolean property indicating if a license plate recognition camera is attached to the Lock."
            },
            "vendor": {
              "type": "string",
              "description": "Vendor of the lock. Default is \"sallis\" when empty. Case-insensitive",
              "nullable": true,
              "example": "sallis,nebula"
            }
          },
          "additionalProperties": false
        },
        "PostNebulaUserRequest": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Nebula user email",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "A model for creating a Nebula user"
        },
        "PostRepeaterRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the Repeater by the client",
              "nullable": true
            },
            "activation_code": {
              "type": "string",
              "description": "The activation code as written on the physical Repeater",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "id of the collection",
              "format": "uuid",
              "nullable": true
            },
            "vendor": {
              "type": "string",
              "description": "Vendor of the repeater. Default is \"sallis\" when empty. Case-insensitive",
              "nullable": true,
              "example": "sallis,nebula"
            }
          },
          "additionalProperties": false
        },
        "PostTimeScheduleRequest": {
          "type": "object",
          "properties": {
            "start_time": {
              "type": "string",
              "format": "date-span"
            },
            "end_time": {
              "type": "string",
              "description": "The end of the time span on which this timeschedule is valid, for the selected days and\r\ndate span.",
              "format": "date-span",
              "example": "17:00"
            },
            "start_date": {
              "type": "string",
              "description": "The date and time at which the timeschedule starts beeing valid /// If time part is not\r\nprovided, time is 00:00:00",
              "format": "date-time",
              "nullable": true,
              "example": "2025-04-04T06:34:49.873"
            },
            "end_date": {
              "type": "string",
              "description": "The date and time at which the timeschedule stops being valid If time part is not\r\nprovided, time is 23:59:59",
              "format": "date-time",
              "nullable": true,
              "example": "2025-04-04T06:34:49.873"
            },
            "monday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Monday between start and end datetimes",
              "example": true
            },
            "tuesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Tuesday between start and end datetimes",
              "example": true
            },
            "wednesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Wednesday between start and end datetimes",
              "example": true
            },
            "thursday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Thursday between start and end datetimes",
              "example": true
            },
            "friday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Friday between start and end datetimes",
              "example": true
            },
            "saturday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Saturday between start and end datetimes",
              "example": true
            },
            "sunday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Sunday between start and end datetimes",
              "example": true
            }
          },
          "additionalProperties": false
        },
        "PutAccessGroupAccessorsRequest": {
          "type": "object",
          "properties": {
            "ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "Represents a list of accessors to set",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "A request to set relation of access group and accessors"
        },
        "PutAccessorCustomPinRequest": {
          "type": "object",
          "properties": {
            "pin": {
              "type": "string",
              "description": "Pin value, numeric value between 4 and 8 digits",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "Request to create or update current accessor's custom pin"
        },
        "PutNebulaCollectionInstallerAccessRequest": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Installer email",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "Nebula collection installer access request model"
        },
        "PutOfflineKeyAccessRequest": {
          "type": "object",
          "properties": {
            "ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PutTreeItemRequest": {
          "required": [
            "iq_tree_items"
          ],
          "type": "object",
          "properties": {
            "otp": {
              "type": "string",
              "description": "The OTP necessary for inserting new iq tree",
              "nullable": true
            },
            "accessor_id": {
              "type": "string",
              "description": "The accessor id whom generated the otp",
              "format": "uuid",
              "nullable": true
            },
            "iq_tree_items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IqTreeItem"
              },
              "description": "Represents list of tree items"
            },
            "vendor": {
              "type": "string",
              "description": "Vendor of the IQ. Default is \"sallis\" when empty. Case-insensitive",
              "nullable": true,
              "example": "sallis,nebula"
            }
          },
          "additionalProperties": false,
          "description": "Represents a tree item"
        },
        "RepeaterResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the repeater",
              "format": "uuid"
            },
            "iq_id": {
              "type": "string",
              "description": "The id of the Repeater to which the repeater is connected",
              "format": "uuid",
              "nullable": true
            },
            "repeater_id": {
              "type": "string",
              "description": "The id of the parent repeater",
              "format": "uuid",
              "nullable": true
            },
            "mac": {
              "type": "string",
              "description": "The mac address of the repeater",
              "nullable": true
            },
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the repeater by the client",
              "nullable": true
            },
            "online": {
              "type": "boolean",
              "description": "Online state"
            },
            "iq_link_state": {
              "$ref": "#/components/schemas/IqLinkState"
            },
            "collection_id": {
              "type": "string",
              "description": "The id of the collection the repeater is assigned",
              "format": "uuid",
              "nullable": true
            },
            "communication_type": {
              "$ref": "#/components/schemas/HardwareCommunicationType"
            },
            "vendor": {
              "$ref": "#/components/schemas/VendorResponse"
            }
          },
          "additionalProperties": false
        },
        "RepeaterResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RepeaterResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "RepeaterSummaryResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the repeater",
              "format": "uuid"
            },
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the repeater by the client",
              "nullable": true
            },
            "mac_address": {
              "type": "string",
              "description": "The mac address of the repeater",
              "nullable": true
            },
            "is_online": {
              "type": "boolean",
              "description": "Online state"
            },
            "collection_id": {
              "type": "string",
              "description": "The id of the collection the repeater is assigned",
              "format": "uuid",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "ReplaceIqRequest": {
          "type": "object",
          "properties": {
            "activation_code": {
              "type": "string",
              "description": "The activation code as written on the physical IQ",
              "nullable": true
            },
            "is_installation": {
              "type": "boolean",
              "description": "Identifies whether IQ is replaced during installation"
            }
          },
          "additionalProperties": false
        },
        "ReplaceLockRequest": {
          "type": "object",
          "properties": {
            "activation_code": {
              "type": "string",
              "description": "The activation code as written on the physical Lock",
              "nullable": true
            },
            "accessor_id": {
              "type": "string",
              "description": "The accessor id whom generated the otp. its needed if only the iq is otp enabled",
              "format": "uuid",
              "nullable": true
            },
            "otp": {
              "type": "string",
              "description": "Otp. its needed if only the iq is otp enabled",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "Request to replace a lock with a new lock"
        },
        "RequestLockStates": {
          "enum": [
            "none",
            "locked",
            "office_mode",
            "uncertain",
            "unlocked"
          ],
          "type": "string"
        },
        "TagRegistrationRequest": {
          "required": [
            "duration_in_seconds"
          ],
          "type": "object",
          "properties": {
            "duration_in_seconds": {
              "type": "integer",
              "description": "The tag registration duration, can be used to enable the tag registration mode",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "TagRegistrationState": {
          "enum": [
            "not_started",
            "in_progress"
          ],
          "type": "string"
        },
        "TagResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the tag",
              "format": "uuid"
            },
            "source_iq_id": {
              "type": "string",
              "description": "The id of the IQ that had the lock that was used to add this tag",
              "format": "uuid",
              "nullable": true
            },
            "tag_number": {
              "type": "string",
              "description": "The number written on the tag",
              "nullable": true
            },
            "rfid_uid": {
              "type": "string",
              "description": "The public RFID uid written inside the tag, readable by RFID readers.",
              "nullable": true
            },
            "added_date": {
              "type": "string",
              "description": "The date the tag was added.",
              "format": "date-time"
            },
            "registration_date": {
              "type": "string",
              "description": "Tag registration to a tenant timestamp.",
              "format": "date-time",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "The id of the collection the tag is assigned",
              "format": "uuid",
              "nullable": true
            },
            "accessor_id": {
              "type": "string",
              "description": "the id of the accessor the tag has",
              "format": "uuid",
              "nullable": true
            },
            "expiry_date": {
              "type": "string",
              "description": "The date this tag will expire",
              "format": "date-time",
              "nullable": true
            },
            "vendors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VendorResponse"
              },
              "description": "Vendors supported by the tag",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "TagResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "TimeScheduleResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the time schedule",
              "format": "uuid"
            },
            "start_time": {
              "type": "string",
              "description": "The start of the time span on which this timeschedule is valid, for the selected days\r\nand date span.",
              "format": "date-span",
              "example": "10:00"
            },
            "end_time": {
              "type": "string",
              "description": "The end of the time span on which this timeschedule is valid, for the selected days and\r\ndate span.",
              "format": "date-span",
              "example": "17:00"
            },
            "start_date": {
              "type": "string",
              "description": "The date at which the timeschedule starts beeing valid",
              "format": "date-time",
              "nullable": true,
              "example": "2016-01-01"
            },
            "end_date": {
              "type": "string",
              "description": "The date at which the timeschedule stops being valid",
              "format": "date-time",
              "nullable": true,
              "example": "2016-12-31"
            },
            "eom_auto_start": {
              "type": "boolean",
              "description": "Whether the lock will unlock and lock automatically. If set to true the lock will open at Clp.Api.Core.Endpoints.Locks.Responses.TimeScheduleSummaryResponse.StartTime\r\nand automatically lock at Clp.Api.Core.Endpoints.Locks.Responses.TimeScheduleSummaryResponse.EndTime"
            },
            "monday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Monday between start and end datetimes",
              "example": true
            },
            "tuesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Tuesday between start and end datetimes",
              "example": true
            },
            "wednesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Wednesday between start and end datetimes",
              "example": true
            },
            "thursday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Thursday between start and end datetimes",
              "example": true
            },
            "friday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Friday between start and end datetimes",
              "example": true
            },
            "saturday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Saturday between start and end datetimes",
              "example": true
            },
            "sunday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Sunday between start and end datetimes",
              "example": true
            }
          },
          "additionalProperties": false
        },
        "TimeScheduleSummaryResponse": {
          "type": "object",
          "properties": {
            "start_time": {
              "type": "string",
              "description": "The start of the time span on which this timeschedule is valid, for the selected days\r\nand date span.",
              "format": "date-span",
              "example": "10:00"
            },
            "end_time": {
              "type": "string",
              "description": "The end of the time span on which this timeschedule is valid, for the selected days and\r\ndate span.",
              "format": "date-span",
              "example": "17:00"
            },
            "start_date": {
              "type": "string",
              "description": "The date at which the timeschedule starts beeing valid",
              "format": "date-time",
              "nullable": true,
              "example": "2016-01-01"
            },
            "end_date": {
              "type": "string",
              "description": "The date at which the timeschedule stops being valid",
              "format": "date-time",
              "nullable": true,
              "example": "2016-12-31"
            },
            "eom_auto_start": {
              "type": "boolean",
              "description": "Whether the lock will unlock and lock automatically. If set to true the lock will open at Clp.Api.Core.Endpoints.Locks.Responses.TimeScheduleSummaryResponse.StartTime\r\nand automatically lock at Clp.Api.Core.Endpoints.Locks.Responses.TimeScheduleSummaryResponse.EndTime"
            },
            "monday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Monday between start and end datetimes",
              "example": true
            },
            "tuesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Tuesday between start and end datetimes",
              "example": true
            },
            "wednesday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Wednesday between start and end datetimes",
              "example": true
            },
            "thursday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Thursday between start and end datetimes",
              "example": true
            },
            "friday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Friday between start and end datetimes",
              "example": true
            },
            "saturday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Saturday between start and end datetimes",
              "example": true
            },
            "sunday": {
              "type": "boolean",
              "description": "Whether this timeschedule is valid on a Sunday between start and end datetimes",
              "example": true
            }
          },
          "additionalProperties": false
        },
        "UpdateCollectionLockRequest": {
          "type": "object",
          "properties": {
            "license_plate_camera": {
              "type": "boolean",
              "description": "A boolean property indicating if a license plate recognition camera is attached to the Lock."
            }
          },
          "additionalProperties": false,
          "description": "A request model to update LicensePlateCamera Lock property"
        },
        "UpdateLockRequest": {
          "type": "object",
          "properties": {
            "customer_reference": {
              "type": "string",
              "description": "The name or any sort of reference that can be used to identify the Lock by the client",
              "nullable": true,
              "example": "Front door"
            },
            "collection_id": {
              "type": "string",
              "description": "Id of the collection to which lock belongs",
              "format": "uuid",
              "nullable": true
            },
            "floor_id": {
              "type": "string",
              "description": "Id of the floor to which lock is linked",
              "format": "uuid",
              "nullable": true
            },
            "license_plate_camera": {
              "type": "boolean",
              "description": "A boolean property indicating if a license plate recognition camera is attached to the Lock."
            }
          },
          "additionalProperties": false
        },
        "UpdateTagRequest": {
          "type": "object",
          "properties": {
            "expiry_date": {
              "type": "string",
              "description": "Date in which this tag will expire.",
              "format": "date-time",
              "nullable": true
            },
            "collection_id": {
              "type": "string",
              "description": "Id of the collection this tag belongs to.",
              "format": "uuid",
              "nullable": true
            },
            "rfid_uid": {
              "type": "string",
              "description": "The Rfid Uid of the tag",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "Request to update a tag"
        },
        "VaultType": {
          "enum": [
            "HashicorpVault",
            "AzureKeyVault"
          ],
          "type": "string"
        },
        "VendorResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for the vendor",
              "format": "uuid"
            },
            "reference": {
              "type": "string",
              "description": "A unique string referring to the vendor",
              "nullable": true
            },
            "display_name": {
              "type": "string",
              "description": "A user-friendly vendor name",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "description": "Vendor entity API response"
        },
        "VendorResponsePagedResponse": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VendorResponse"
              },
              "nullable": true
            },
            "next_page_link": {
              "type": "string",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WifiNetworkInterfaceResponse": {
          "type": "object",
          "properties": {
            "priority": {
              "type": "integer",
              "description": "The priority of the network interface",
              "format": "int32",
              "nullable": true
            },
            "status": {
              "$ref": "#/components/schemas/NetworkInterfaceStatus"
            },
            "mac_address": {
              "type": "string",
              "description": "The mac address of the network interface",
              "nullable": true
            }
          },
          "additionalProperties": false
        }
      },
      "securitySchemes": {
        "Bearer": {
          "type": "apiKey",
          "description": "Please insert 'Bearer {JWT}' into the field",
          "name": "Authorization",
          "in": "header"
        }
      }
    },
    "security": [
      {
        "Bearer": []
      }
    ]
  }